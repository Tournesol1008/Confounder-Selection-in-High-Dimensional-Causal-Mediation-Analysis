y0m0 <- (score[, 7] + (1 - score[, 1]) * (score[, 4] - score[, 7])/(1 - score[, 3]))
y1m0 <- (score[, 1] * (1 - score[, 2])/(score[, 2] * (1 - score[, 3])) * (score[, 4] - score[, 8]) + (1 - score[, 1])/(1 - score[, 3]) * (score[, 8] - score[, 9]) + score[, 9])
y1m1 <- (score[, 10] + score[, 1] * (score[, 4] - score[, 10])/score[, 3])
}
if (normalized != FALSE) {
nobs <- nrow(score)
sumscore1 <- sum((1 - score[, 1]) * score[, 2]/((1 - score[, 2]) * score[, 3]))
sumscore2 <- sum(score[, 1]/score[, 3])
sumscore3 <- sum((1 - score[, 1])/(1 - score[, 3]))
sumscore4 <- sum(score[, 1] * (1 - score[, 2])/(score[, 2] * (1 - score[, 3])))
y0m1 <- (nobs * (1 - score[, 1]) * score[, 2]/((1 - score[, 2]) * score[, 3]) * (score[, 4] - score[, 5]))/sumscore1 + (nobs * score[, 1]/score[, 3] * (score[, 5] - score[, 6]))/sumscore2 + score[, 6]
y0m0 <- score[, 7] + (nobs * (1 - score[, 1]) * (score[, 4] - score[, 7])/(1 - score[, 3]))/sumscore3
y1m0 <- (nobs * score[, 1] * (1 - score[, 2])/(score[, 2] * (1 - score[, 3])) * (score[, 4] - score[, 8]))/sumscore4 + (nobs * (1 - score[, 1])/(1 - score[, 3]) * (score[, 8] - score[, 9]))/sumscore3 + score[, 9]
y1m1 <- score[, 10] + (nobs * score[, 1] * (score[, 4] - score[, 10])/score[, 3])/sumscore2
}
my1m1 <- mean(y1m1)
my0m1 <- mean(y0m1)
my1m0 <- mean(y1m0)
my0m0 <- mean(y0m0)
tot <- my1m1 - my0m0
dir1 <- my1m1 - my0m1
dir0 <- my1m0 - my0m0
indir1 <- my1m1 - my1m0
indir0 <- my0m1 - my0m0
vtot <- mean((y1m1 - y0m0 - tot)^2)
vdir1 <- mean((y1m1 - y0m1 - dir1)^2)
vdir0 <- mean((y1m0 - y0m0 - dir0)^2)
vindir1 <- mean((y1m1 - y1m0 - indir1)^2)
vindir0 <- mean((y0m1 - y0m0 - indir0)^2)
vcontrol <- mean((y0m0 - my0m0)^2)
return(list(effects = c(tot, dir1, dir0, indir1, indir0, my0m0, vtot, vdir1, vdir0, vindir1, vindir0, vcontrol, sum(selall)), selected_vars = selected_vars))
}
medDML <- function(y, d, m, x, k = 3, trim = 0.05, order = 1, multmed = TRUE, fewsplits = FALSE, normalized = TRUE) {
if (multmed != 0) {
temp <- hdmedalt(y = y, d = d, m = m, x = x, trim = trim, order = order, fewsplits = fewsplits, normalized = normalized)
}
if (multmed == 0) {
temp <- hdmed(y = y, d = d, m = m, x = x, k = k, trim = trim, order = order, normalized = normalized)
}
eff <- temp$effects[1:6]
se <- sqrt((temp$effects[7:12]) / temp$effects[13])
results <- rbind(eff, se, 2 * pnorm(-abs(eff / se)))
colnames(results) <- c("total", "dir.treat", "dir.control", "indir.treat", "indir.control", "Y(0,M(0))")
rownames(results) <- c("effect", "se", "p-val")
ntrimmed <- length(d) - temp$effects[13]
return(list(results = results, ntrimmed = ntrimmed, selected_vars = temp$selected_vars))
}
##########################################################################################
# Function to run medDML analysis with variable k
run_medDML_analysis <- function(df, k_value, outcome_column) {
df$csascore.x <- ifelse(df$csascore.x >= 4, 1, 0)  # Binary exposure
covariates <- df[, column_names]
result <- medDML(df[[outcome_column]],
df$csascore.x,
df$faith_pd.y,
covariates,
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE)
return(result)
}
# Covariate columns for analysis
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Run analysis for df1, df2
results <- list()
# Assign outcome columns to the dataframes
outcome_columns <- list(df1 = "moca_impaired.y", df2 = "mocatot.y")
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
outcome_column <- outcome_columns[[df_name]]
# Run for k = 3
results[[paste0(df_name, "_k3")]] <- run_medDML_analysis(df, k_value = 3, outcome_column = outcome_column)
}
# Print or return results for further analysis
print(results)
# Load libraries
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData.csv")
# Selecting variables - df1-df4
df_list <- list(
df1 = subset(data, select = -c(subnum.x,uclalst.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x,uclalst.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
#View(df_list$df1)
# Perform hot deck imputation with column-specific changes for df2
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
# Perform hotdeck imputation
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
# Convert outcome column to numeric
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
# Apply hotdeck imputation: mocatot.y for df2, GDS.y for df4
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
##########################################################################################
# Function to run medDML analysis with variable k
run_medDML_analysis <- function(df, k_value, outcome_column) {
df$csascore.x <- ifelse(df$csascore.x >= 4, 1, 0)  # Binary exposure
covariates <- df[, column_names]
result <- medDML(df[[outcome_column]],
df$csascore.x,
df$faith_pd.y,
covariates,
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE)
return(result)
}
# Covariate columns for analysis
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Run analysis for df1, df2
results <- list()
# Assign outcome columns to the dataframes
outcome_columns <- list(df1 = "moca_impaired.y", df2 = "mocatot.y")
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
outcome_column <- outcome_columns[[df_name]]
# Run for k = 3
results[[paste0(df_name, "_k3")]] <- run_medDML_analysis(df, k_value = 3, outcome_column = outcome_column)
}
# Print or return results for further analysis
print(results)
# ---------------------------
# Load libraries and data
# ---------------------------
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData.csv")
# Selecting variables - create two data frames (each missing one of the outcomes)
df_list <- list(
df1 = subset(data, select = -c(subnum.x, uclalst.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x, uclalst.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
# (Optional) Perform hot deck imputation for df2 on its outcome if needed
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
# ---------------------------
# Analysis settings
# ---------------------------
# Covariate columns for analysis (all covariates to be used)
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Define exposure variants along with the covariate set to be used (all covariates here)
expo_variants <- list(
uclalst = list(
expo = "uclalst.x",
threshold = 35,
covariates = column_names
),
csascore = list(
expo = "csascore.x",
threshold = 4,
covariates = column_names
)
)
# Define the outcomes of interest
outcomes <- c("moca_impaired.y", "mocatot.y")
# ---------------------------
# Modified run_medDML_analysis function (for given expo settings)
# ---------------------------
run_medDML_analysis <- function(df, expo, expo_threshold, k_value, covariates, outcome_column) {
# Create a binary treatment variable based on the specified exposure variable and threshold
df$treatment <- ifelse(df[[expo]] >= expo_threshold, 1, 0)
result <- medDML(
df[[outcome_column]],  # Outcome variable
df$treatment,          # Treatment variable (binary)
df$faith_pd.y,         # Mediator variable (assumed fixed)
df[, covariates],      # Covariate matrix
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE
)
return(result)
}
# ---------------------------
# Loop through all combinations
# ---------------------------
results <- list()
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
# Loop over each exposure variant (uclalst.x and csascore.x)
for (variant_name in names(expo_variants)) {
variant <- expo_variants[[variant_name]]
# Loop over each outcome variable
for (outcome in outcomes) {
# Check if the outcome exists in the current data frame
if (!(outcome %in% names(df))) {
cat("Skipping outcome", outcome, "in", df_name, "because it is not present.\n")
next
}
# Create a unique key for the results list
result_key <- paste(df_name, variant_name, outcome, "k3", sep = "_")
# Create a title containing the treatment variable, outcome variable, and exposure settings
title <- paste("Treatment:", variant$expo,
"| Outcome:", outcome,
"| Exposure Threshold:", variant$threshold,
"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Load libraries and data
# ---------------------------
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData.csv")
# Selecting variables - create two data frames (each missing one of the outcomes)
df_list <- list(
df1 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
# (Optional) Perform hot deck imputation for df2 on its outcome if needed
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
# ---------------------------
# Analysis settings
# ---------------------------
# Covariate columns for analysis (all covariates to be used)
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Define exposure variants along with the covariate set to be used (all covariates here)
expo_variants <- list(
uclalst = list(
expo = "uclalst.x",
threshold = 35,
covariates = column_names
),
csascore = list(
expo = "csascore.x",
threshold = 4,
covariates = column_names
)
)
# Define the outcomes of interest
outcomes <- c("moca_impaired.y", "mocatot.y")
# ---------------------------
# Modified run_medDML_analysis function (for given expo settings)
# ---------------------------
run_medDML_analysis <- function(df, expo, expo_threshold, k_value, covariates, outcome_column) {
# Create a binary treatment variable based on the specified exposure variable and threshold
df$treatment <- ifelse(df[[expo]] >= expo_threshold, 1, 0)
result <- medDML(
df[[outcome_column]],  # Outcome variable
df$treatment,          # Treatment variable (binary)
df$faith_pd.y,         # Mediator variable (assumed fixed)
df[, covariates],      # Covariate matrix
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE
)
return(result)
}
# ---------------------------
# Loop through all combinations
# ---------------------------
results <- list()
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
# Loop over each exposure variant (uclalst.x and csascore.x)
for (variant_name in names(expo_variants)) {
variant <- expo_variants[[variant_name]]
# Loop over each outcome variable
for (outcome in outcomes) {
# Check if the outcome exists in the current data frame
if (!(outcome %in% names(df))) {
cat("Skipping outcome", outcome, "in", df_name, "because it is not present.\n")
next
}
# Create a unique key for the results list
result_key <- paste(df_name, variant_name, outcome, "k3", sep = "_")
# Create a title containing the treatment variable, outcome variable, and exposure settings
title <- paste("Treatment:", variant$expo,
"| Outcome:", outcome,
"| Exposure Threshold:", variant$threshold,
"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Print the results with titles
# ---------------------------
for (key in names(results)) {
cat("Result key:", key, "\n")
cat("Title:", results[[key]]$title, "\n")
print(results[[key]]$result)
cat("\n====================================\n\n")
}
# ---------------------------
# Load libraries and data
# ---------------------------
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData.csv")
# Selecting variables - create two data frames (each missing one of the outcomes)
df_list <- list(
df1 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
# (Optional) Perform hot deck imputation for df2 on its outcome if needed
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
# ---------------------------
# Analysis settings
# ---------------------------
# Covariate columns for analysis (all covariates to be used)
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Define exposure variants along with the covariate set to be used (all covariates here)
expo_variants <- list(
uclalst = list(
expo = "uclalst.x",
threshold = 35,
covariates = column_names
),
csascore = list(
expo = "csascore.x",
threshold = 4,
covariates = column_names
)
)
# Define the outcomes of interest
outcomes <- c("moca_impaired.y", "mocatot.y")
# ---------------------------
# Modified run_medDML_analysis function (for given expo settings)
# ---------------------------
run_medDML_analysis <- function(df, expo, expo_threshold, k_value, covariates, outcome_column) {
# Create a binary treatment variable based on the specified exposure variable and threshold
df$treatment <- ifelse(df[[expo]] >= expo_threshold, 1, 0)
result <- medDML(
df[[outcome_column]],  # Outcome variable
df$treatment,          # Treatment variable (binary)
df$faith_pd.y,         # Mediator variable (assumed fixed)
df[, covariates],      # Covariate matrix
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE
)
return(result)
}
# ---------------------------
# Loop through all combinations
# ---------------------------
results <- list()
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
# Loop over each exposure variant (uclalst.x and csascore.x)
for (variant_name in names(expo_variants)) {
variant <- expo_variants[[variant_name]]
# Loop over each outcome variable
for (outcome in outcomes) {
# Check if the outcome exists in the current data frame
if (!(outcome %in% names(df))) {
cat("Skipping outcome", outcome, "in", df_name, "because it is not present.\n")
next
}
# Create a unique key for the results list
result_key <- paste(df_name, variant_name, outcome, sep = "_")
# Create a title containing the treatment variable, outcome variable, and exposure settings
title <- paste("Treatment:", variant$expo,
"| Outcome:", outcome,
"| Exposure Threshold:", variant$threshold,
"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Print the results with titles
# ---------------------------
for (key in names(results)) {
cat("Result key:", key, "\n")
cat("Title:", results[[key]]$title, "\n")
print(results[[key]]$result)
cat("\n====================================\n\n")
}
