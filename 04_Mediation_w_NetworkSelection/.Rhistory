"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Print the results with titles
# ---------------------------
for (key in names(results)) {
cat("Result key:", key, "\n")
cat("Title:", results[[key]]$title, "\n")
print(results[[key]]$result)
cat("\n====================================\n\n")
}
# Load libraries and data
# ---------------------------
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData 4.csv")
# Selecting variables - create two data frames (each missing one of the outcomes)
df_list <- list(
df1 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
# Perform hot deck imputation for df2 on its outcome if needed
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
# ---------------------------
# Analysis settings
# ---------------------------
# Covariate columns for analysis (all covariates to be used)
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Define exposure variants along with the covariate set to be used (all covariates here)
expo_variants <- list(
uclalst = list(
expo = "uclalst.x",
threshold = 35,
covariates = column_names
),
csascore = list(
expo = "csascore.x",
threshold = 4,
covariates = column_names
)
)
# Define the outcomes of interest
outcomes <- c("moca_impaired.y", "mocatot.y")
# ---------------------------
# Modified run_medDML_analysis function (for given expo settings)
# ---------------------------
run_medDML_analysis <- function(df, expo, expo_threshold, k_value, covariates, outcome_column) {
# Create a binary treatment variable based on the specified exposure variable and threshold
df$treatment <- ifelse(df[[expo]] >= expo_threshold, 1, 0)
result <- medDML(
df[[outcome_column]],  # Outcome variable
df$treatment,          # Treatment variable (binary)
df$faith_pd.y,         # Mediator variable (assumed fixed)
df[, covariates],      # Covariate matrix
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE
)
return(result)
}
# ---------------------------
# Loop through all combinations
# ---------------------------
results <- list()
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
# Loop over each exposure variant (uclalst.x and csascore.x)
for (variant_name in names(expo_variants)) {
variant <- expo_variants[[variant_name]]
# Loop over each outcome variable
for (outcome in outcomes) {
# Check if the outcome exists in the current data frame
if (!(outcome %in% names(df))) {
cat("Skipping outcome", outcome, "in", df_name, "because it is not present.\n")
next
}
# Create a unique key for the results list
result_key <- paste(df_name, variant_name, outcome, sep = "_")
# Create a title containing the treatment variable, outcome variable, and exposure settings
title <- paste("Treatment:", variant$expo,
"| Outcome:", outcome,
"| Exposure Threshold:", variant$threshold,
"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Print the results with titles
# ---------------------------
for (key in names(results)) {
cat("Result key:", key, "\n")
cat("Title:", results[[key]]$title, "\n")
print(results[[key]]$result)
cat("\n====================================\n\n")
}
options(max.print = 1000)
# Load libraries
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(qgraph)
library(ggplot2)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data<-read.csv("t1t2data_wo_NetworkSelection.csv")
# Recode "Missing:not collected" as NA
data[data == "Missing:not collected"] <- NA
data[data == "NA"] <- NA
##Missingness
# Function to summarize missingness by columns
summarize_missingness <- function(df) {
total_missing <- sapply(df, function(x) sum(is.na(x)))
percent_missing <- sapply(df, function(x) mean(is.na(x)) * 100)
summary_df <- data.frame(
TotalMissing = total_missing,
PercentMissing = percent_missing
)
summary_df <- summary_df[order(-summary_df$PercentMissing), ]
return(summary_df)
}
## Missingness by columns
missingness_byCol <- summarize_missingness(data)
print(missingness_byCol)
#Convert character data to numerical
data$moca_impaired.y <- ifelse(data$moca_impaired.y == "Impaired", 1, 0)
data$GDS_impaired.y <- ifelse(data$GDS_impaired.y == "Impaired", 1, 0)
#Selecting variables - df1-df4
df1 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, cfq25_t.y, excomp3.y, mocatot.y, GDS.y, GDS_impaired.y))
df2 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, cfq25_t.y, excomp3.y, moca_impaired.y, GDS.y, GDS_impaired.y))
df3 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, cfq25_t.y, excomp3.y, mocatot.y, moca_impaired.y,GDS.y))
df4 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, cfq25_t.y, excomp3.y, mocatot.y, moca_impaired.y,GDS_impaired.y))
# Perform multiple imputation
imputed_data <- mice(df2, m = 30, method = 'pmm', maxit = 50, seed = 500)
df2 <- complete(imputed_data, 1)
# Perform hot deck imputation using the hotdeck function
original_columns <- names(df2)
df2 <- hotdeck(df2, variable = names(df2))
df2 <- df2[, original_columns]
df2$mocatot.y <- as.numeric(df2$mocatot.y)
# Causal mediation analysis with DML
## exposure must be binary. - >=35 for high degree of loneliness
df2$uclalst.x <- ifelse(df2$uclalst.x >= 35, 1, 0)
## covariates
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
covariates <- df2[, column_names]
medDML(df2$mocatot.y,
df2$uclalst.x,
df2$faith_pd.y,
covariates,
k=3,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE)
# ---------------------------
# Load libraries and data
# ---------------------------
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(plyr)
library(dplyr)
library(tidyr)
library(mice)
library(causalweight)
library(VIM)
# Read in data
data <- read.csv("t1t2ImputedData 2.csv")
# Selecting variables - create two data frames (each missing one of the outcomes)
df_list <- list(
df1 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y)),
df2 = subset(data, select = -c(subnum.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
)
# Perform hot deck imputation for df2 on its outcome if needed
hotdeck_impute <- function(df, outcome_column) {
original_columns <- names(df)
df_imputed <- hotdeck(df, variable = names(df))
df_imputed <- df_imputed[, original_columns]
df_imputed[[outcome_column]] <- as.numeric(df_imputed[[outcome_column]])
return(df_imputed)
}
df_list$df2 <- hotdeck_impute(df_list$df2, "mocatot.y")
# ---------------------------
# Analysis settings
# ---------------------------
# Covariate columns for analysis (all covariates to be used)
column_names <- c("faith_pd.x", "agevisit.x", "gender.x", "livsit.x", "educ.x", "veteran.x", "socposc.x",
"income_p2.x", "income_f2.x", "smoke_e.x", "alc_2.x", "bsiatot.x", "cesdt10.x", "phq9ss.x",
"mencomp.x", "srsa.x", "ldr2.x", "psstot.x", "bmmrs_or.x", "cdrs10_t.x", "cesdhs.x", "lest.x",
"lotrt.x", "mlq_ps.x", "mlq_ss.x", "ths_tot.x", "cei2_tot.x", "chs_tot.x", "cse_pfc.x", "cse_suet.x",
"cse_sff.x", "nefftot.x", "pmst_new.x", "swlstot.x", "swfinan.x", "wsdm_cd.x", "wsdm_rd.x", "wsdm_ad.x",
"sdw_sa.x", "sdw_d.x", "sdw_er.x", "sdw_i.x", "sdw_psb.x", "sdw_tdv.x", "sppb_sos.x", "tug_tt.x",
"ffi_tfs.x", "ffi_ipf.x", "ffi_grip.x", "ffi_walk.x", "phycomp.x", "nsictot.x", "bqsa_risk.x",
"psqitot.x", "sys.x", "dia.x", "bmi.x", "whip1cm.x", "cirs_mnce.x", "cirs_mtot.x", "prsd8a_ss.x",
"prsi_ss.x", "prcmp_ss.x", "prdsa_ss.x", "ancoltot.x", "psytr_ms.x", "psytr_ad.x", "psytr_aa.x",
"psytr_dm.x", "psytr_pk.x", "psytr_lith.x", "npsyt_ht.x", "npsyt_db.x", "npsyt_chol.x", "npsyt_horm.x",
"AfricanAmerican", "Asian", "Caucasian", "Hispanic", "Divorced", "Single")
# Define exposure variants along with the covariate set to be used (all covariates here)
expo_variants <- list(
uclalst = list(
expo = "uclalst.x",
threshold = 35,
covariates = column_names
),
csascore = list(
expo = "csascore.x",
threshold = 4,
covariates = column_names
)
)
# Define the outcomes of interest
outcomes <- c("moca_impaired.y", "mocatot.y")
# ---------------------------
# Modified run_medDML_analysis function (for given expo settings)
# ---------------------------
run_medDML_analysis <- function(df, expo, expo_threshold, k_value, covariates, outcome_column) {
# Create a binary treatment variable based on the specified exposure variable and threshold
df$treatment <- ifelse(df[[expo]] >= expo_threshold, 1, 0)
result <- medDML(
df[[outcome_column]],  # Outcome variable
df$treatment,          # Treatment variable (binary)
df$faith_pd.y,         # Mediator variable (assumed fixed)
df[, covariates],      # Covariate matrix
k = k_value,
multmed = TRUE,
fewsplits = TRUE,
normalized = TRUE
)
return(result)
}
# ---------------------------
# Loop through all combinations
# ---------------------------
results <- list()
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
# Loop over each exposure variant (uclalst.x and csascore.x)
for (variant_name in names(expo_variants)) {
variant <- expo_variants[[variant_name]]
# Loop over each outcome variable
for (outcome in outcomes) {
# Check if the outcome exists in the current data frame
if (!(outcome %in% names(df))) {
cat("Skipping outcome", outcome, "in", df_name, "because it is not present.\n")
next
}
# Create a unique key for the results list
result_key <- paste(df_name, variant_name, outcome, sep = "_")
# Create a title containing the treatment variable, outcome variable, and exposure settings
title <- paste("Treatment:", variant$expo,
"| Outcome:", outcome,
"| Exposure Threshold:", variant$threshold,
"| Covariates: all")
# Run the medDML analysis
analysis_result <- run_medDML_analysis(
df = df,
expo = variant$expo,
expo_threshold = variant$threshold,
k_value = 3,
covariates = variant$covariates,
outcome_column = outcome
)
# Store the result along with its title
results[[result_key]] <- list(title = title, result = analysis_result)
}
}
}
# ---------------------------
# Print the results with titles
# ---------------------------
for (key in names(results)) {
cat("Result key:", key, "\n")
cat("Title:", results[[key]]$title, "\n")
print(results[[key]]$result)
cat("\n====================================\n\n")
}
options(max.print = 1000)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load libraries
library(mediation)
library(dplyr)
library(mice)
library(VIM)
library(mgcv)
# Read in data
data <- read.csv("t1t2ImputedData 2.csv")
#####################################################################################################################################
## Loneliness - Binary MoCA(df1) vs Loneliness - Continous MoCA (df2) with Paritial Correlation Network Selection at gamma=0.1
########################################## For df1 ####################################################################################
#Selecting variables - df1-df2.
df1 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y))
df2 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
# Exposure must be binary.
df1$uclalst.x <- ifelse(df1$uclalst.x >= 35, 1, 0)
# Mediation analysis - uclalst.x - Binary MoCA with Network confounder Selection at Gamma=0.1
med.fitL01B <- lm(faith_pd.y ~ uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x, data = df1)
out.fitL01B <- glm(moca_impaired.y ~ faith_pd.y + uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df1, family = binomial("probit"))
med.outL01B <- mediate(med.fitL01B, out.fitL01B, treat = "uclalst.x", mediator = "faith_pd.y",boot=TRUE, robustSE = TRUE,
sims = 1000)
summary(med.outL01B)
sensitivityL01B <- medsens(med.outL01B, rho.by = 0.1, sims = 1000,
eps = sqrt(.Machine$double.eps), effect.type = "indirect")
summary(sensitivityL01B)
# Mediation analysis - uclalst.x - Binary MoCA with Network confounder Selection at Gamma=0
med.fitL00B <- lm(faith_pd.y ~ uclalst.x +mencomp.x+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x, data = df1)
out.fitL00B <- glm(moca_impaired.y ~ faith_pd.y + uclalst.x +mencomp.x+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df1, family = binomial("probit"))
med.outL00B <- mediate(med.fitL00B, out.fitL00B, treat = "uclalst.x", mediator = "faith_pd.y",boot=TRUE, robustSE = TRUE,
sims = 1000)
summary(med.outL00B)
sensitivityL00B <- medsens(med.outL00B, rho.by = 0.1, sims = 1000,
eps = sqrt(.Machine$double.eps), effect.type = "indirect")
summary(sensitivityL00B)
############################################ For df2 #################################
# Hot deck imputation using the hotdeck function
original_columns <- names(df2)
df2 <- hotdeck(df2, variable = names(df2))
df2 <- df2[, original_columns]
df2$mocatot.y <- as.numeric(df2$mocatot.y)
# Exposure must be binary.
df2$uclalst.x <- ifelse(df2$uclalst.x >= 35, 1, 0)
# Create control group indicator
df2$control <- ifelse(df2$uclalst.x == 0, 1, 0)
# Mediation analysis - uclalst.x - Continuous MoCA with Network confounder Selection at Gamma=0.1
med.fitL01C <- lm(faith_pd.y ~ uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df2)
# Fit outcome model (using GAM with s() constructs)
out.fitL01C <- gam(mocatot.y ~ s(uclalst.x, faith_pd.y,k=5, bs = "ad") +
uclalst.x+faith_pd.y+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
family = gaussian(link = "identity"),
method = "REML",
data = df2)
# for sensitivity analysis
out.fitL01C_sens <- lm(mocatot.y ~ faith_pd.y+uclalst.x +uclalst.x:faith_pd.y+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,data=df2)
# Perform mediation analysis
Med.outL01C <- mediate(med.fitL01C, out.fitL01C,
sims = 1000,
treat = "uclalst.x",
mediator = "faith_pd.y",
control = "control",
boot = TRUE)
Med.outL01C_sens <- mediate(med.fitL01C, out.fitL01C_sens,
sims = 1000,
treat = "uclalst.x",
mediator = "faith_pd.y",
boot = TRUE)
summary(Med.outL01C)
sensitivityL01C <- medsens(Med.outL01C_sens, rho.by = 0.1, sims = 1000,
eps = sqrt(.Machine$double.eps), effect.type = "indirect")
summary(sensitivityL01C)
# Mediation analysis - uclalst.x - Continuous MoCA with Network confounder Selection at Gamma=0
med.fitL00C <- lm(faith_pd.y ~ uclalst.x +ldr2.x+mencomp.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df2)
# Fit outcome model (using GAM with s() constructs)
out.fitL00C <- gam(mocatot.y ~ s(uclalst.x, faith_pd.y,k=5, bs = "ad") +
uclalst.x+faith_pd.y+mencomp.x+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
family = gaussian(link = "identity"),
method = "REML",
data = df2)
# for sensitivity analysis
out.fitL00C_sens <- lm(mocatot.y ~ faith_pd.y+uclalst.x +uclalst.x:faith_pd.y+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,data=df2)
# Perform mediation analysis
Med.outL00C <- mediate(med.fitL00C, out.fitL00C,
sims = 1000,
treat = "uclalst.x",
mediator = "faith_pd.y",
control = "control",
boot = TRUE)
options(max.print = 1000)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load libraries
library(mediation)
library(dplyr)
library(mice)
library(VIM)
library(mgcv)
# Read in data
data <- read.csv("t1t2ImputedData.csv")
#####################################################################################################################################
## Loneliness - Binary MoCA(df1) vs Loneliness - Continous MoCA (df2) with Paritial Correlation Network Selection at gamma=0.1
########################################## For df1 ####################################################################################
#Selecting variables - df1-df2.
df1 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, mocatot.y, GDS.y, GDS_impaired.y))
df2 <- subset(data, select = -c(subnum.x,csascore.x, shannon.x, shannon.y, moca_impaired.y, GDS.y, GDS_impaired.y))
# Exposure must be binary.
df1$uclalst.x <- ifelse(df1$uclalst.x >= 35, 1, 0)
# Mediation analysis - uclalst.x - Binary MoCA with Network confounder Selection at Gamma=0.1
med.fitL01B <- lm(faith_pd.y ~ uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x, data = df1)
out.fitL01B <- glm(moca_impaired.y ~ faith_pd.y + uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df1, family = binomial("probit"))
med.outL01B <- mediate(med.fitL01B, out.fitL01B, treat = "uclalst.x", mediator = "faith_pd.y",boot=TRUE, robustSE = TRUE,
sims = 1000)
summary(med.outL01B)
sensitivityL01B <- medsens(med.outL01B, rho.by = 0.1, sims = 1000,
eps = sqrt(.Machine$double.eps), effect.type = "indirect")
summary(sensitivityL01B)
# Mediation analysis - uclalst.x - Binary MoCA with Network confounder Selection at Gamma=0
med.fitL00B <- lm(faith_pd.y ~ uclalst.x +mencomp.x+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x, data = df1)
out.fitL00B <- glm(moca_impaired.y ~ faith_pd.y + uclalst.x +mencomp.x+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df1, family = binomial("probit"))
med.outL00B <- mediate(med.fitL00B, out.fitL00B, treat = "uclalst.x", mediator = "faith_pd.y",boot=TRUE, robustSE = TRUE,
sims = 1000)
summary(med.outL00B)
sensitivityL00B <- medsens(med.outL00B, rho.by = 0.1, sims = 1000,
eps = sqrt(.Machine$double.eps), effect.type = "indirect")
summary(sensitivityL00B)
############################################ For df2 #################################
# Hot deck imputation using the hotdeck function
original_columns <- names(df2)
df2 <- hotdeck(df2, variable = names(df2))
df2 <- df2[, original_columns]
df2$mocatot.y <- as.numeric(df2$mocatot.y)
# Exposure must be binary.
df2$uclalst.x <- ifelse(df2$uclalst.x >= 35, 1, 0)
# Create control group indicator
df2$control <- ifelse(df2$uclalst.x == 0, 1, 0)
# Mediation analysis - uclalst.x - Continuous MoCA with Network confounder Selection at Gamma=0.1
med.fitL01C <- lm(faith_pd.y ~ uclalst.x +ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x
+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
data = df2)
# Fit outcome model (using GAM with s() constructs)
out.fitL01C <- gam(mocatot.y ~ s(uclalst.x, faith_pd.y,k=5, bs = "ad") +
uclalst.x+faith_pd.y+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,
family = gaussian(link = "identity"),
method = "REML",
data = df2)
# for sensitivity analysis
out.fitL01C_sens <- lm(mocatot.y ~ faith_pd.y+uclalst.x +uclalst.x:faith_pd.y+ldr2.x+lotrt.x+mlq_ps.x+cse_sff.x+nefftot.x+wsdm_cd.x+sdw_sa.x+sdw_psb.x+phycomp.x+prsd8a_ss.x+prsi_ss.x+prdsa_ss.x+faith_pd.x,data=df2)
# Perform mediation analysis
Med.outL01C <- mediate(med.fitL01C, out.fitL01C,
sims = 1000,
treat = "uclalst.x",
mediator = "faith_pd.y",
control = "control",
boot = TRUE)
